.Dd December 19, 2020
.Dt SCHRIFT 3
.Sh NAME
.Nm schrift ,
.Nm libschrift
.Nd Lightweight TrueType font rendering library
.Sh SYNOPSIS
.Lb libschrift
.In schrift.h
.Ft const char *
.Fn sft_version "void"
.Ft SFT_Font *
.Fn sft_loadmem "const void *mem" "unsigned long size"
.Ft SFT_Font *
.Fn sft_loadfile "const char *filename"
.Ft void
.Fn sft_freefont "SFT_Font *font"
.Ft int
.Fn sft_lmetrics "const struct SFT *sft" "struct SFT_LMetrics *metrics"
.Ft int
.Fn sft_lookup "const struct SFT *sft" "unsigned long codepoint" "SFT_Glyph *glyph"
.Ft int
.Fn sft_hmetrics "const struct SFT *sft" "SFT_Glyph glyph" "struct SFT_HMetrics *metrics"
.Ft int
.Fn sft_box "const struct SFT *sft" "SFT_Glyph glyph" "struct SFT_Box *box"
.Ft int
.Fn sft_render "const struct SFT *sft" "SFT_Glyph glyph" "struct SFT_Image image"
.Ft int
.Fn sft_kerning "const struct SFT *sft" "SFT_Glyph leftGlyph" "SFT_Glyph rightGlyph" "struct SFT_Kerning *kerning"
.Sh DESCRIPTION
.Fn sft_version
can be used to determine which version of
.Nm
you are using.
Since
.Nm
uses semantic versioning, the returned string is of the form
.Qq MAJOR.MINOR.PATCH .
.Ss Loading fonts
.Fn sft_loadfile
will load a font from a given filename (by mapping it into memory),
whereas
.Fn sft_loadmem
can be given an arbitrary memory address and size (in bytes).
This allows users to load fonts from ZIP file streams etc.
.sp
Once a user is done with a particular font and does not need to access it any more, he may use
.Fn sft_freefont
to free all memory reserved by the font.
If the font has been loaded with
.Fn sft_loadmem
the user has to additionally free the memory they passed to
.Fn sft_loadmem
on their own.
.Ss the SFT structure
Most functions take a struct SFT as their primary argument.
This is a structure to be filled out by the application.
It bundles multiple common parameters,
for example which font to use, or how big the text should be.
The fields are as follows:
.Bl -tag -width 8
.It Va font
The font to render with.
.It Va xScale
The user-specified width of one em-square in pixels.
.It Va yScale
The user-specified height of one em-square in pixels.
.It Va x
The horizontal offset in pixels to be applied before rendering to an image.
Can be used for subpixel-accurate positioning.
.It Va y
The vertical offset in pixels to be applied before rendering to an image.
Can be used for subpixel-accurate positioning.
.It Va flags
A bitfield of binary flags that control various functionalities.
.sp
If the
.Dv SFT_DOWNWARD_Y
flag is set, the Y axis is interpreted to point downwards.
Per default, it points upwards.
.El
.sp
.Fn sft_lmetrics
.Bl -tag -width 8
.It Va ascender
The distance from the baseline of a line of text to the typographic top of the text
.It Va descender
The distance from the baseline of a line of text to the typographic bottom of the text
.It Va lineGap
The standard amount of padding between consecutive lines
.El
.sp
.Nm
operates in terms of glyph ids of type SFT_Glyph, which are font-specific numbers assigned to renderable symbols (glyphs).
The way to obtain a glyph id is to call
.Fn sft_lookup ,
where the first argument is a struct SFT,
the second is the Unicode codepoint / UTF-32 encoding of the symbol that you're interested in,
and the third is a pointer to the variable which the glyph id should be written to.
.sp
.Fn sft_hmetrics
.Bl -tag -width 8
.It Va advanceWidth
The amount of pixels along the X axis that the pen position should advance after rendering this glyph.
.It Va leftSideBearing
The offset that should be applied along the X axis from the pen position to the edge of the glyph image.
.El
.sp
.Fn sft_box
.Bl -tag -width 8
.It Va yOffset
.It Va minWidth
The minimum width that an image needs such that the glyph can be properly rasterized into it.
.It Va minHeight
The minimum height that an image needs such that the glyph can be properly rasterized into it.
.El
.sp
To actually render a glyph into a easily-displayable raster image, use
.Fn sft_render .
.Bl -tag -width 8
.It Va pixels
A pointer to a byte array, width * height in size
.It Va width
The width of the image in pixels
.It Va height
The height of the image in pixels
.El
.sp
Some sequences of glyphs may look awkward if they're layed out naively.
For example, the gap between the two characters \(dqVA\(dq might look disproportionally large.
Kerning is a way to combat this phenomenon, by slightly moving the second character closer or further
away by a small amount.
.Fn sft_kerning
.Bl -tag -width 8
.It Va x
The offset in pixels along the X axis that should be applied to the second glyph, and any that follow.
.It Va y
The offset in pixels along the Y axis that should be applied to the second glyph, and any that follow.
.El
.Sh RETURN VALUES
.Fn sft_loadmem
and
.Fn sft_loadfile
return
.Dv NULL
on error.
.sp
.Fn sft_lmetrics ,
.Fn sft_lookup ,
.Fn sft_hmetrics ,
.Fn sft_box ,
.Fn sft_render ,
and
.Fn sft_kerning
all return 0 on success and -1 on error.
.Sh EXAMPLES
See the source code of
.Sy sftdemo
for a detailed example of real-world usage of
.Nm .
.Sh AUTHORS
.An Thomas Oltmann Aq Mt thomas.oltmann.hhg@gmail.com
.Sh CAVEATS
The only text encoding that
.Nm
understands is Unicode.
.sp
Similarly, the only kind of font file supported right now
are TrueType (.ttf) fonts (Some OpenType fonts might work too,
as OpenType is effectively a superset of TrueType).
.sp
As of this version of
.Nm ,
there is still no support for right-to-left scripts,
but it is on the roadmap.
.sp
.Nm
currently does not implement font hinting and probably never will.
