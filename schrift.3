.Dd May 25, 2020
.Dt SCHRIFT 3
.Os suckless.org
.Sh NAME
.Nm schrift
.Nd Lightweight TrueType font rendering library

.Sh SYNOPSIS

.Lb libschrift

.In schrift.h

.Ft const char *
.Fn sft_version "void"

.Ft SFT_Font *
.Fn sft_loadmem "const void *mem" "unsigned long size"
.Ft SFT_Font *
.Fn sft_loadfile "const char *filename"
.Ft void
.Fn sft_freefont "SFT_Font *font"

.Ft int
.Fn sft_linemetrics "const struct SFT *sft" "double *ascent" "double *descent" "double *gap"
.Ft int
.Fn sft_kerning "const struct SFT *sft" "unsigned long leftChar" "unsigned long rightChar" "double kerning[2]"
.Ft int
.Fn sft_char "const struct SFT *sft" "unsigned int charCode" "struct SFT_Char *chr"

.Sh DESCRIPTION

.Fn sft_version
can be used to determine which version of
.Nm
you are using. Since
.Nm
uses semantic versioning, the returned string will usually be of the form
.Qq MAJOR.MINOR.PATCH
\&.

.Fn sft_loadfile
will load a font from a given filename (by mapping it into memory),
whereas
.Fn sft_loadmem
can be given an arbitrary memory address and size (in bytes).
This allows users to load fonts from ZIP file streams etc.

Once a user is done with a particular font and does not need to access it any more,
he may use
.Fn sft_freefont
to free all memory reserved by the font.
If the font has been loaded with
.Fn sft_loadmem
the user has to additionally free the memory they passed to
.Fn sft_loadmem
on their own.



The most important public function of
.Nm
is
.Fn sft_char .
It lets users query codepoint-specific information, like horizontal advance width, extents, etc.
It can also render a specified codepoint to an in-memory image.
More details can be found in the following sections.

.Ss The SFT structure

The struct SFT is a structure to be filled out by the application using schrift.
It bundles all the different parameters neccessary for drawing,
like for example which font to use, or how big the text should be, into a single struct.
Most functions in
.Nm
take a struct SFT as their primary argument.
.Bd -literal
struct SFT {
	SFT_Font *font;
	double xScale;
	double yScale;
	double x;
	double y;
	unsigned int flags;
};
.Ed

The fields are as follows:
.Bl -tag -width 8
.It Va font
The font to render with.
.It Va xScale
The user-specified width of one em-square in pixels.
.It Va yScale
The user-specified height of one em-square in pixels.
.It Va x
The horizontal offset in pixels to be applied before rendering to an image.
Can be used for subpixel-accurate positioning.
.It Va y
The vertical offset in pixels to be applied before rendering to an image.
Can be used for subpixel-accurate positioning.
.It Va flags
A bitfield of binary flags that control various functionalities.

If
.Dv SFT_DOWNWARD_Y
is set, the Y axis is interpreted to point downwards. Otherwise, it points upwards.

If
.Dv SFT_RENDER_IMAGE
is set, the function
.Fn sft_char
will, when called, render a specified character into an image buffer.
Otherwise,
.Fn sft_char
will only return auxiliary data such as image buffer dimensions and horizontal advance width.

If
.Dv SFT_CATCH_MISSING
is set, the function
.Nm sft_char
will return immediately if called on a character that the used font does not have data for.
The user then has to check whether this happened by looking at the returned field
.Va missing
which will be set to 1 if this case occurred, or 0 otherwise.

.El

.Ss The SFT_Char structure
.Fn sft_char
returns all relevant information except status code in a struct SFT_Char.
.Bd -literal
struct SFT_Char {
	void *image;
	double advance;
	int x;
	int y;
	int width;
	int height;
	unsigned char missing;
};
.Ed

The fields are as follows:
.Bl -tag -width 8
.It Va image
An 8-bit grayscale image without any padding, so each byte corresponds to one pixel.
The colors are inverse to what you would expect: Text is always drawn white on black.
That's because this way it's really convenient to use the image as an alpha mask.
This is also the reason why the image isn't gamma corrected.
This field only gets set if the flag
.Dv SFT_RENDER_IMAGE
was set.
In this case, it is the caller's duty to later release the image's memory again by calling
.Fn free .
.It Va x
The X offset in pixels that should be applied to the image.
.It Va y
The Y offset in pixels that should be applied to the image.
The flag
.Dv SFT_DOWNWARD_Y
controls the orientation of the coordinate system that this field is relative to.
.It Va width
The width of the image in pixels.
This field gets set even if
.Dv SFT_RENDER_IMAGE
was not set.
.It Va height
The height of the image in pixels.
This field gets set even if
.Dv SFT_RENDER_IMAGE
was not set.
.It Va missing
Contains a positive value if the used font doesn't have data for the specified character,
and a fallback character (the missing glyph) has been selected instead.
.El

.Sh RETURN VALUES

.Fn sft_loadmem
and
.Fn sft_loadfile
return NULL on error.
.Fn sft_linemetrics
and
.Fn sft_char
return 0 on success or -1 on error.

.Sh EXAMPLES

See the source code of
.Sy sftdemo
for a detailed example of real-world usage of
.Nm .

.Sh CAVEATS

The only text encoding that
.Nm
understands is Unicode.
Similarly, the only kind of font file supported right now
are TrueType (.ttf) fonts (Some OpenType fonts might work too,
as OpenType is effectively a superset of TrueType).
.Nm
currently does not implement font hinting and probably never will.

.Sh AUTHORS
.An Thomas Oltmann Aq Mt thomas.oltmann.hhg@gmail.com
