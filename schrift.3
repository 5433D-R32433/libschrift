.Dd December 19, 2020
.Dt SCHRIFT 3
.Os
.Sh NAME
.Nm schrift ,
.Nm libschrift
.Nd Lightweight TrueType font rendering library
.Sh SYNOPSIS
.Lb libschrift
.In schrift.h
.Ft const char *
.Fn sft_version "void"
.Ft SFT_Font *
.Fn sft_loadmem "const void *mem" "unsigned long size"
.Ft SFT_Font *
.Fn sft_loadfile "const char *filename"
.Ft void
.Fn sft_freefont "SFT_Font *font"
.Ft int
.Fn sft_lmetrics "const struct SFT *sft" "struct SFT_LMetrics *metrics"
.Ft int
.Fn sft_lookup "const struct SFT *sft" "unsigned long codepoint" "SFT_Glyph *glyph"
.Ft int
.Fn sft_hmetrics "const struct SFT *sft" "SFT_Glyph glyph" "struct SFT_HMetrics *metrics"
.Ft int
.Fn sft_kerning "const struct SFT *sft" "SFT_Glyph leftGlyph" "SFT_Glyph rightGlyph" "struct SFT_Kerning *kerning"
.Ft int
.Fn sft_extents "const struct SFT *sft" "SFT_Glyph glyph" "struct SFT_Extents *extents"
.Ft int
.Fn sft_render "const struct SFT *sft" "SFT_Glyph glyph" "struct SFT_Image image"
.Sh DESCRIPTION
The function
.Fn sft_version
may be called to determine the version of
.Nm .
Since
.Nm
uses semantic versioning, the returned string is of the form \(dqMAJOR.MINOR.PATCH\(dq.
.Ss Loading fonts
.Fn sft_loadfile
will load a font from a given filename (by mapping it into memory),
whereas
.Fn sft_loadmem
can be given an arbitrary memory address and size (in bytes).
This allows applications to load fonts from ZIP file streams etc.
.sp
Once a particular font is no longer needed, its memory should be freed again by calling
.Fn sft_freefont .
If the font has been loaded with
.Fn sft_loadmem ,
the underlying memory region will have to be separately freed by the applocation.
.Ss the SFT structure
Most functions take a
.Vt struct SFT
as their primary argument.
This is a structure to be filled out by the caller.
It bundles multiple commonly needed parameters.
The fields are as follows:
.Bl -tag -width 8
.It Va font
The font to render with.
.It Va xScale
The user-specified width of one em-square in pixels.
.It Va yScale
The user-specified height of one em-square in pixels.
.It Va xOffset
The horizontal offset in pixels to be applied before rendering to an image.
Can be used for subpixel-accurate positioning.
.It Va yOffset
The vertical offset in pixels to be applied before rendering to an image.
Can be used for subpixel-accurate positioning.
.It Va flags
A bitfield of binary flags that control various functionalities.
.sp
If the
.Dv SFT_DOWNWARD_Y
flag is set, the Y axis is interpreted to point downwards.
Per default, it points upwards.
.El
.Ss Glyph ids
.Nm
operates in terms of glyph ids (of type
.Vt SFT_Glyph ) ,
which are font-specific identifiers assigned to renderable symbols (glyphs).
The way to obtain a glyph id is to call
.Fn sft_lookup ,
where the first argument is a struct SFT,
the second is the Unicode codepoint of the symbol,
and the third is a pointer to the variable which the glyph id should be written to.
.Ss Querying metrics
.Fn sft_lmetrics .
.sp
This function writes its output into the structure pointed to by
.Va metrics .
The fields are as follows:
.Bl -tag -width 8
.It Va ascender
The distance from the baseline to the visual top of the text
.It Va descender
The distance from the baseline to the visual bottom of the text
.It Va lineGap
The default amount of horizontal padding between consecutive lines
.El
.sp
When displaying multiple glyphs in a line, you have to keep track of the pen position.
.Fn sft_hmetrics
tells you where to draw the next glyph with respect to the pen position,
and how to update it after rendering the glyph.
.sp
This function writes its output into the structure pointed to by
.Va metrics .
The fields are as follows:
.Bl -tag -width 8
.It Va advanceWidth
How much the pen position should advance to the right after rendering the glyph
.It Va leftSideBearing
The offset that should be applied along the X axis from the pen position to the edge of the glyph image.
.El
.sp
Some sequences of glyphs may look awkward if they're layed out naively.
For example, the gap between the two characters \(dqVA\(dq might look disproportionally large.
Kerning is a way to combat this phenomenon, by slightly moving the second character closer or further
away by a small amount.
.Fn sft_kerning .
.sp
This function writes its output into the structure pointed to by
.Va kerning .
The fields are as follows:
.Bl -tag -width 8
.It Va xShift
The offset along the X axis that should be applied to the second glyph, and any that follow.
.It Va yShift
The offset along the Y axis that should be applied to the second glyph, and any that follow.
.El
.Ss Rendering glyphs
.Fn sft_extents .
.sp
This function writes its output into the structure pointed to by
.Va extents .
The fields are as follows:
.Bl -tag -width 8
.It Va yOffset
.It Va minWidth
The minimum width that an image needs such that the glyph can be properly rasterized into it.
.It Va minHeight
The minimum height that an image needs such that the glyph can be properly rasterized into it.
.El
.sp
To actually render a glyph into a easily-displayable raster image, use
.Fn sft_render .
.sp
The fields are as follows:
.Bl -tag -width 8
.It Va pixels
A pointer to a byte array, width * height in size
.It Va width
The width of the image in pixels
.It Va height
The height of the image in pixels
.El
.Sh RETURN VALUES
.Fn sft_loadmem
and
.Fn sft_loadfile
return
.Dv NULL
on error.
.sp
.Fn sft_lmetrics ,
.Fn sft_lookup ,
.Fn sft_hmetrics ,
.Fn sft_kerning ,
.Fn sft_extents ,
and
.Fn sft_render
all return 0 on success and -1 on error.
.Sh EXAMPLES
See the source code of
.Sy sftdemo
for a detailed example of real-world usage of
.Nm .
.Sh AUTHORS
.An Thomas Oltmann Aq Mt thomas.oltmann.hhg@gmail.com
.Sh CAVEATS
The only text encoding that
.Nm
understands is Unicode.
.sp
Similarly, the only kind of font file supported right now
are TrueType (.ttf) fonts (Some OpenType fonts might work too,
as OpenType is effectively a superset of TrueType).
.sp
As of this version of
.Nm ,
there is still no support for right-to-left scripts,
but it is on the roadmap.
.sp
.Nm
currently does not implement font hinting and probably never will.
